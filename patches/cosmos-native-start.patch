From 445ae2a45dfcdde33beda2a41ee3a0d972e77447 Mon Sep 17 00:00:00 2001
From: "copilot-swe-agent[bot]" <198982749+Copilot@users.noreply.github.com>
Date: Wed, 15 Oct 2025 02:13:45 +0000
Subject: [PATCH] Apply PRs #81, #85, and #91 to cosmos-native-start branch

---
 .github/UNIT_TESTS.md                         | 131 +++++++++++++++
 .github/workflows/unit-tests.yml              | 152 ++++++++++++++++++
 infra/app/ai.bicep                            |   2 +-
 infra/azd-hooks/preprovision.ps1              |   9 +-
 infra/azd-hooks/preprovision.sh               |  11 +-
 .../ai/cognitive-services/deployment.bicep    |   4 +-
 infra/main.bicep                              |  16 +-
 infra/main.parameters.json                    |   3 +
 infra/main.test.bicep                         |   1 +
 9 files changed, 319 insertions(+), 10 deletions(-)
 create mode 100644 .github/UNIT_TESTS.md
 create mode 100644 .github/workflows/unit-tests.yml

diff --git a/.github/UNIT_TESTS.md b/.github/UNIT_TESTS.md
new file mode 100644
index 0000000..4fc817a
--- /dev/null
+++ b/.github/UNIT_TESTS.md
@@ -0,0 +1,131 @@
+# Unit Tests Documentation
+
+This document describes the unit tests implemented for the cosmos-copilot project.
+
+> **Note**: For a comprehensive guide on testing in GitHub Codespaces, deploying the solution, and running the app, see [TESTING_GUIDE.md](./TESTING_GUIDE.md)
+
+## Overview
+
+The unit tests are implemented as GitHub Actions workflows that run automatically on:
+- Push to main branch
+- Pull requests to main branch
+- Manual workflow dispatch
+
+## Test Jobs
+
+### 1. Package Restore and Build (`package-restore-and-build`)
+
+**Purpose**: Ensure packages are up to date and compatible with each other, and the project compiles.
+
+**Steps**:
+- Checkout code
+- Setup .NET 8.0.x
+- Install .NET Aspire workload (required for the project)
+- Restore NuGet dependencies
+- Check for outdated packages (informational)
+- Check for deprecated packages (informational)
+- Build solution in Release configuration
+- Verify web app can be built independently
+
+**Success Criteria**: 
+- All packages restore successfully
+- Solution builds without errors
+- No critical package compatibility issues
+
+### 2. Bicep Deployment Validation (`bicep-validation`)
+
+**Purpose**: Validate the Bicep deployment files are syntactically correct and can be compiled.
+
+**Steps**:
+- Checkout code
+- Install Bicep CLI
+- Build and validate main Bicep file
+- Lint Bicep files for best practices
+- Check for compilation errors
+
+**Success Criteria**:
+- Bicep files compile without errors
+- No critical linting violations
+
+### 3. Deployment What-If Analysis (`deployment-validation`) - **OPTIONAL**
+
+**Purpose**: Ensure the solution can be deployed (if Azure credentials are available).
+
+**Steps**:
+- Checkout code
+- Check if Azure credentials are available
+- Login to Azure (if credentials are configured)
+- Run deployment validation using `az deployment sub validate`
+- Perform what-if analysis on the deployment
+
+**Success Criteria**:
+- Job always succeeds (never fails the workflow)
+- If credentials are available: deployment template is validated
+- If credentials are not available: skips gracefully with informational message
+
+**Note**: This job is **completely optional**. The workflow will succeed whether or not the `AZURE_CREDENTIALS` secret is configured. Add the secret only if you want to enable live deployment validation.
+
+### 4. Code Quality Checks (`code-quality`)
+
+**Purpose**: Additional quality checks including build warnings and code formatting.
+
+**Steps**:
+- Checkout code
+- Setup .NET 8.0.x
+- Install .NET Aspire workload
+- Restore dependencies
+- Build with warnings as errors (informational)
+- Check code formatting using `dotnet format` (informational)
+
+**Success Criteria**:
+- Code builds successfully
+- Minimal build warnings
+- Consistent code formatting (informational only)
+
+## Configuration
+
+### Required Secrets
+
+- None (for basic functionality)
+
+### Optional Secrets
+
+- `AZURE_CREDENTIALS`: Azure service principal credentials for deployment validation
+  - Format: JSON with clientId, clientSecret, subscriptionId, tenantId
+  - If not configured, deployment validation will be skipped
+
+## Running Tests Locally
+
+### Package and Build Tests
+```bash
+cd src
+dotnet workload install aspire
+dotnet restore cosmos-copilot.sln
+dotnet build cosmos-copilot.sln --configuration Release
+```
+
+### Bicep Validation
+```bash
+cd infra
+bicep build main.bicep
+```
+
+### Check for Outdated Packages
+```bash
+dotnet list ./src/cosmos-copilot.WebApp/cosmos-copilot.WebApp.csproj package --outdated
+```
+
+### Code Formatting
+```bash
+cd src
+dotnet format cosmos-copilot.sln --verify-no-changes
+```
+
+## Continuous Improvement
+
+These tests should be expanded as the project grows to include:
+- Unit tests for individual components
+- Integration tests for services
+- End-to-end tests for critical workflows
+- Performance and load tests
+- Security scanning
diff --git a/.github/workflows/unit-tests.yml b/.github/workflows/unit-tests.yml
new file mode 100644
index 0000000..d2d7ff4
--- /dev/null
+++ b/.github/workflows/unit-tests.yml
@@ -0,0 +1,152 @@
+name: Unit Tests
+
+on:
+  push:
+    branches: [ main ]
+  pull_request:
+    branches: [ main ]
+  workflow_dispatch:
+
+jobs:
+  package-restore-and-build:
+    name: Package Restore and Build
+    runs-on: ubuntu-latest
+    
+    steps:
+    - name: Checkout code
+      uses: actions/checkout@v4
+      
+    - name: Setup .NET
+      uses: actions/setup-dotnet@v4
+      with:
+        dotnet-version: '8.0.x'
+        
+    - name: Install .NET Aspire workload
+      run: dotnet workload install aspire
+      
+    - name: Restore dependencies
+      run: dotnet restore ./src/cosmos-copilot.sln
+      
+    - name: Verify package compatibility
+      run: |
+        echo "Checking for package compatibility issues..."
+        dotnet list ./src/cosmos-copilot.WebApp/cosmos-copilot.WebApp.csproj package --outdated || true
+        dotnet list ./src/cosmos-copilot.WebApp/cosmos-copilot.WebApp.csproj package --deprecated || true
+        
+    - name: Build solution
+      run: dotnet build ./src/cosmos-copilot.sln --configuration Release --no-restore
+      
+    - name: Verify startup capability
+      run: |
+        echo "Verifying the solution compiles and can start..."
+        dotnet build ./src/cosmos-copilot.WebApp/cosmos-copilot.WebApp.csproj --configuration Release --no-restore
+
+  bicep-validation:
+    name: Bicep Deployment Validation
+    runs-on: ubuntu-latest
+    
+    steps:
+    - name: Checkout code
+      uses: actions/checkout@v4
+      
+    - name: Setup Bicep CLI
+      run: |
+        # Install Bicep CLI
+        curl -Lo bicep https://github.com/Azure/bicep/releases/latest/download/bicep-linux-x64
+        chmod +x ./bicep
+        sudo mv ./bicep /usr/local/bin/bicep
+        bicep --version
+        
+    - name: Validate Bicep files
+      run: |
+        echo "Validating main Bicep deployment file..."
+        bicep build ./infra/main.bicep
+        
+    - name: Lint Bicep files
+      run: |
+        echo "Linting Bicep files..."
+        bicep build ./infra/main.bicep --diagnostics-format=sarif --outfile bicep-linter.sarif || true
+        
+    - name: Check for Bicep compilation errors
+      run: |
+        echo "Checking for critical Bicep errors..."
+        if bicep build ./infra/main.bicep 2>&1 | grep -i "error"; then
+          echo "Bicep compilation has errors!"
+          exit 1
+        else
+          echo "Bicep compilation successful!"
+        fi
+
+  deployment-validation:
+    name: Deployment What-If Analysis (Optional)
+    runs-on: ubuntu-latest
+    
+    steps:
+    - name: Checkout code
+      uses: actions/checkout@v4
+      
+    - name: Check for Azure credentials
+      id: check-credentials
+      run: |
+        if [ -n "${{ secrets.AZURE_CREDENTIALS }}" ]; then
+          echo "credentials_available=true" >> $GITHUB_OUTPUT
+        else
+          echo "credentials_available=false" >> $GITHUB_OUTPUT
+        fi
+      
+    - name: Setup Azure CLI
+      id: azure-login
+      uses: azure/login@v2
+      with:
+        creds: ${{ secrets.AZURE_CREDENTIALS }}
+      if: steps.check-credentials.outputs.credentials_available == 'true'
+      continue-on-error: true
+      
+    - name: Validate deployment template (if credentials available)
+      if: steps.azure-login.outcome == 'success'
+      run: |
+        echo "Running what-if deployment analysis..."
+        az deployment sub validate \
+          --location eastus \
+          --template-file ./infra/main.bicep \
+          --parameters environmentName=test-validation location=eastus
+      continue-on-error: true
+      
+    - name: Skip deployment validation (no credentials)
+      if: steps.check-credentials.outputs.credentials_available != 'true'
+      run: |
+        echo "ℹ️  Azure credentials not configured. Skipping deployment validation."
+        echo "This is optional - the workflow will continue successfully."
+        echo ""
+        echo "To enable deployment validation, add AZURE_CREDENTIALS secret to the repository."
+        echo "See the PR description for the JSON format required."
+
+  code-quality:
+    name: Code Quality Checks
+    runs-on: ubuntu-latest
+    
+    steps:
+    - name: Checkout code
+      uses: actions/checkout@v4
+      
+    - name: Setup .NET
+      uses: actions/setup-dotnet@v4
+      with:
+        dotnet-version: '8.0.x'
+        
+    - name: Install .NET Aspire workload
+      run: dotnet workload install aspire
+      
+    - name: Restore dependencies
+      run: dotnet restore ./src/cosmos-copilot.sln
+      
+    - name: Check for build warnings
+      run: |
+        echo "Building solution and checking for warnings..."
+        dotnet build ./src/cosmos-copilot.sln --configuration Release --no-restore /warnaserror || true
+        
+    - name: Code format check (if dotnet format available)
+      run: |
+        echo "Checking code formatting..."
+        dotnet format ./src/cosmos-copilot.sln --verify-no-changes --no-restore || true
+      continue-on-error: true
diff --git a/infra/app/ai.bicep b/infra/app/ai.bicep
index 014471d..7d06c1d 100644
--- a/infra/app/ai.bicep
+++ b/infra/app/ai.bicep
@@ -38,7 +38,7 @@ module openAiModelDeployments '../core/ai/cognitive-services/deployment.bicep' =
     params: {
       name: deployment.name
       parentAccountName: openAiAccount.outputs.name
-      skuName: 'Standard'
+      skuName: 'GlobalStandard'
       skuCapacity: deployment.skuCapacity
       modelName: deployment.modelName
       modelVersion: deployment.modelVersion
diff --git a/infra/azd-hooks/preprovision.ps1 b/infra/azd-hooks/preprovision.ps1
index d1aa58b..4dd455e 100644
--- a/infra/azd-hooks/preprovision.ps1
+++ b/infra/azd-hooks/preprovision.ps1
@@ -1,2 +1,9 @@
 # Register any required resource providers
-Register-AzResourceProvider -ProviderNamespace Microsoft.AlertsManagement
\ No newline at end of file
+Register-AzResourceProvider -ProviderNamespace Microsoft.AlertsManagement
+
+# Get the current user's UPN and set it as an azd environment variable
+$ownerUpn = (az ad signed-in-user show --query userPrincipalName -o tsv)
+if ($ownerUpn) {
+    azd env set OWNER_UPN $ownerUpn
+    Write-Host "Set OWNER_UPN to: $ownerUpn"
+}
\ No newline at end of file
diff --git a/infra/azd-hooks/preprovision.sh b/infra/azd-hooks/preprovision.sh
index aba4131..77c93c2 100644
--- a/infra/azd-hooks/preprovision.sh
+++ b/infra/azd-hooks/preprovision.sh
@@ -1,2 +1,11 @@
+#!/bin/bash
+
 # # Register any required resource providers
-az provider register --namespace Microsoft.AlertsManagement
\ No newline at end of file
+az provider register --namespace Microsoft.AlertsManagement
+
+# Get the current user's UPN and set it as an azd environment variable
+OWNER_UPN=$(az ad signed-in-user show --query userPrincipalName -o tsv)
+if [ -n "$OWNER_UPN" ]; then
+    azd env set OWNER_UPN "$OWNER_UPN"
+    echo "Set OWNER_UPN to: $OWNER_UPN"
+fi
\ No newline at end of file
diff --git a/infra/core/ai/cognitive-services/deployment.bicep b/infra/core/ai/cognitive-services/deployment.bicep
index 693ebf0..19eeea2 100644
--- a/infra/core/ai/cognitive-services/deployment.bicep
+++ b/infra/core/ai/cognitive-services/deployment.bicep
@@ -5,8 +5,8 @@ param name string
 @description('Name of the parent Azure Cognitive Services account.')
 param parentAccountName string
 
-@description('Name of the SKU for the deployment. Defaults to "Standard".')
-param skuName string = 'Standard'
+@description('Name of the SKU for the deployment. Defaults to "GlobalStandard".')
+param skuName string = 'GlobalStandard'
 
 @description('Capacity of the SKU for the deployment. Defaults to 100.')
 param skuCapacity int = 100
diff --git a/infra/main.bicep b/infra/main.bicep
index d0ec86e..7a52e6f 100644
--- a/infra/main.bicep
+++ b/infra/main.bicep
@@ -21,6 +21,9 @@ param location string
 @description('Id of the principal to assign database and application roles.')
 param principalId string = ''
 
+@description('UPN (User Principal Name) of the owner for resource tagging.')
+param ownerUpn string = ''
+
 // Optional parameters
 param openAiAccountName string = ''
 param cosmosDbAccountName string = ''
@@ -33,10 +36,13 @@ param serviceName string = 'web'
 
 var abbreviations = loadJsonContent('abbreviations.json')
 var resourceToken = toLower(uniqueString(subscription().id, environmentName, location))
-var tags = {
-  'azd-env-name': environmentName
-  repo: 'https://github.com/AzureCosmosDB/cosmosdb-nosql-copilot'
-}
+var tags = union(
+  {
+    'azd-env-name': environmentName
+    repo: 'https://github.com/AzureCosmosDB/cosmosdb-nosql-copilot'
+  },
+  !empty(ownerUpn) ? { owner: ownerUpn } : {}
+)
 
 var chatSettings = {
   maxConversationTokens: '100'
@@ -44,7 +50,7 @@ var chatSettings = {
   productMaxResults: '10'
 }
 
-var productDataSource = 'https://cosmosdbcosmicworks.blob.core.windows.net/cosmic-works-vectorized/product-text-3-large-1536.json'
+var productDataSource = 'https://raw.githubusercontent.com/AzureCosmosDB/cosmosdb-nosql-copilot/refs/heads/main/data/products-text-3-large-1536.json'
 
 resource resourceGroup 'Microsoft.Resources/resourceGroups@2022-09-01' = {
   name: environmentName
diff --git a/infra/main.parameters.json b/infra/main.parameters.json
index 67ad852..758e7ec 100644
--- a/infra/main.parameters.json
+++ b/infra/main.parameters.json
@@ -10,6 +10,9 @@
     },
     "principalId": {
       "value": "${AZURE_PRINCIPAL_ID}"
+    },
+    "ownerUpn": {
+      "value": "${OWNER_UPN}"
     }
   }
 }
\ No newline at end of file
diff --git a/infra/main.test.bicep b/infra/main.test.bicep
index e9aa30c..e208b4e 100644
--- a/infra/main.test.bicep
+++ b/infra/main.test.bicep
@@ -14,5 +14,6 @@ module main 'main.bicep' = {
     environmentName: environmentName
     location: location
     principalId: ''
+    ownerUpn: ''
   }
 }
-- 
2.51.0

